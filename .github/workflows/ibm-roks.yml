# This workflow will build a docker container, publish it to IBM Container Registry, and deploy it to IKS when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains a Dockerfile
# 2. Setup secrets in your repository by going to settings: Create ICR_NAMESPACE and IBM_CLOUD_API_KEY
# 3. Change the values for the IBM_CLOUD_REGION, REGISTRY_HOSTNAME, IMAGE_NAME, IKS_CLUSTER, DEPLOYMENT_NAME, and PORT

name: Build and Deploy to ROKS

# https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows
on: push
    # Edit to the branch(es) you want to build and deploy on each push.
    # branches: [ $default-branch ]
  
  # release:
  #  types: [created]

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
  IBM_CLOUD_REGION: us-south
  ICR_NAMESPACE: ${{ secrets.ICR_NAMESPACE }}
  REGISTRY_HOSTNAME: us.icr.io
  IMAGE_NAME: trader-gha-test
  IKS_CLUSTER: gas-cluster3
  DEPLOYMENT_NAME: trader
  CLUSTER_NAMESPACE: trader-gha-test
  EVIDENCE_DIR: evidence-repo
  PORT: 5001

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish
    runs-on: ubuntu-latest
    outputs:
      image-registry-path: ${{ steps.push-to-icr.outputs.image-registry-path }}
      unit-test-result: ${{ steps.unit-test.outputs.unit-test-result }}
    environment: production
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Download and Install IBM Cloud CLI
    - name: Install IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false
        ibmcloud plugin install -f kubernetes-service
        ibmcloud plugin install -f container-registry

    # Authenticate with IBM Cloud CLI
    - name: Authenticate with IBM Cloud CLI
      run: |
        ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g default
        ibmcloud cr region-set "${IBM_CLOUD_REGION}"
        ibmcloud cr login

    # Setup java
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 8

    # Build and package app
    - name: Build and package app
      id: unit-test
      run: |
        mvn clean verify
        cat target/failsafe-reports/failsafe-summary.xml
        grep -q "<failures>0</failures>" target/failsafe-reports/failsafe-summary.xml
        code=$?
        echo "ret: $code"
        if [[ $code -eq 0  ]]; then
          echo "success"
          echo '::set-output name=unit-test-result::success'
        else
          echo "failed"
          echo '::set-output name=unit-test-result::failed'
        fi
     
    # Build the Docker image
    - name: Build with Docker
      run: |
        docker build -t "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$IMAGE_NAME":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .

    # Push the image to IBM Container Registry
    - name: Push the image to ICR
      id: push-to-icr
      run: |
        docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA
        echo '::set-output name=image-registry-path::$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA' 
    
  
  va-scan:
    name: Vulnarability advisor scan
    runs-on: ubuntu-latest
    needs: setup-build-publish-deploy
    outputs:
      va-scan-status: ${{ steps.va-scan.outputs.scan-status }}    
    steps:
    # Download and Install IBM Cloud CLI
    - name: Install IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false
        ibmcloud plugin install -f kubernetes-service
        ibmcloud plugin install -f container-registry

    # Authenticate with IBM Cloud CLI
    - name: Authenticate with IBM Cloud CLI
      run: |
        ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g default
        ibmcloud cr region-set "${IBM_CLOUD_REGION}"
        ibmcloud cr login

    - name: VA scan
      id: va-scan
      continue-on-error: true
      run: |
        set -x
        echo "Job output: ${{needs.setup-build-publish-deploy.outputs.image-registry-path}}"
        IMAGE_URL=${{needs.setup-build-publish-deploy.outputs.image-registry-path}}
        echo "Getting the VA status of ${IMAGE_URL}"
        set +e

        for ITER in {1..2}
        do
          echo "Trying again to see if scan is done"
          ibmcloud cr va ${IMAGE_URL} --output json | grep -i "Try again later"
          retry=$?
          if [[ $retry -ne 0  ]]; then
            break;
          fi
          sleep 60
        done


        echo "Saving results to va-result.json"

        ibmcloud cr va ${IMAGE_URL} --output json > va-result.json
        
        cat va-result.json

        VA_STATUS=$(cat va-result.json | jq -r '.[].status')

        set -e
        echo "VA scan status: ${VA_STATUS}"
        echo '::set-output name=scan-status::${VA_STATUS}'

        if [[ "${VA_STATUS}" == "OK" ]]; then
          echo "VA - No Issues in the image"
          echo '::set-output name=scan-status::sucess'
          exit 0
        elif [[ $(cat va-result.json | jq -r '.[].vulnerabilities | length') -gt 0 ]]; then
          echo "VA Failure: $(cat va-result.json | jq -r '.[].vulnerabilities | length') vulnerabilities found in the image"
          cat va-result.json | jq -r '.[].vulnerabilities'
          echo '::set-output name=scan-status::failure'
          exit 1
        elif [[ $(cat va-result.json | jq -r '.[].configuration_issues | length') -gt 0 ]]; then
          echo "VA Warning - $(cat va-result.json | jq -r '.[].configuration_issues | length') configuration issues found in the image"
          cat va-result.json | jq -r '.[].configuration_issues'
          echo '::set-output name=scan-status::sucess'
          exit 0
        else
          echo "VA Warning: non-OK status from Vulnerability Advisor ${VA_STATUS}"
          cat va-result.json | jq -r '.[]'
          echo '::set-output name=scan-status::failure'
        fi        
  deploy-to-ocp:
    name: Deploy to OpenShift cluster
    runs-on: ubuntu-latest
    needs: [setup-build-publish-deploy, va-scan]
    steps:
    # Checkout repo   
    - name: Checkout
      uses: actions/checkout@v2    
    # Download and Install IBM Cloud CLI
    - name: Install IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false
        ibmcloud plugin install -f kubernetes-service
        ibmcloud plugin install -f container-registry

    # Authenticate with IBM Cloud CLI
    - name: Authenticate with IBM Cloud CLI
      run: |
        ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g default
        ibmcloud cr region-set "${IBM_CLOUD_REGION}"
        ibmcloud cr login
        
    # Install oc    
    - name: Install oc
      uses: redhat-actions/oc-installer@v1
      with:
        oc_version: '4.5'        

    # Deploy the Docker image to the IKS cluster
    - name: Deploy to IKS
      run: |
        ibmcloud ks cluster ls
        ibmcloud ks cluster config --cluster $IKS_CLUSTER
        kubectl config current-context
        oc login -u apikey -p $IBM_CLOUD_API_KEY
    
        echo "Configuring cluster namespace"
        if kubectl get namespace ${CLUSTER_NAMESPACE}; then
          echo -e "Namespace ${CLUSTER_NAMESPACE} found."
        else
          kubectl create namespace ${CLUSTER_NAMESPACE}
          echo -e "Namespace ${CLUSTER_NAMESPACE} created."
        fi
        oc project ${CLUSTER_NAMESPACE}
    
        oc apply -f manifests/deploy-openshift.yaml
        oc set image deployment/$DEPLOYMENT_NAME trader=${{needs.setup-build-publish-deploy.outputs.image-registry-path}} --record
        oc rollout status deployment/$DEPLOYMENT_NAME
        
    #         kubectl create deployment $DEPLOYMENT_NAME --image=$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA --dry-run -o yaml > deployment.yaml
    #    kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
    #    kubectl apply -f service.yaml
    #    kubectl get services -o wide

  publish-evidence:
    name: Publish evidence to evidence repo
    runs-on: ubuntu-latest
    needs: [setup-build-publish-deploy, va-scan]
    steps:
    # Checkout repo   
    - name: Checkout
      uses: actions/checkout@v2    
      
    - run: |
        pwd
        ls -la
        
      
    # Checkout evidence repo   
    - name: Checkout evidence repo
      uses: actions/checkout@v2
      with:
        repository: 'gasgithub/trader-evidence'
        path: ${{ env.EVIDENCE_DIR }}
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - run: |
        pwd
        ls -la
    
    # Create new folder
    - name: Create evidence
      run: |
        set -x
        set +e
        cd $EVIDENCE_DIR
        
        NEW_UUID2=$(cat /proc/sys/kernel/random/uuid)
        echo "GEN UUID=$NEW_UUID2"
        set -e
        
        mkdir -p raw/cd/$NEW_UUID2
        cd ..
        
        cp evidence-template/summary.json $EVIDENCE_DIR/raw/cd/$NEW_UUID2/summary.json
        
        echo "unit test: ${{needs.setup-build-publish-deploy.outputs.unit-test-result}}"
        echo "vascan test: ${{needs.va-scan.outputs.va-scan-status}}"
        
        echo "$( jq '(.evidences[] | select(.evidence_type_id == "com.ibm.unit_tests") | .result) |= "${{needs.setup-build-publish-deploy.outputs.unit-test-result}}"' $EVIDENCE_DIR/raw/cd/$NEW_UUID2/summary.json )" > $EVIDENCE_DIR/raw/cd/$NEW_UUID2/summary.json
        echo "$( jq '(.evidences[] | select(.evidence_type_id == "com.ibm.cloud.image_vulnerability_scan") | .result) |= "${{needs.va-scan.outputs.va-scan-status}}"' $EVIDENCE_DIR/raw/cd/$NEW_UUID2/summary.json )" > $EVIDENCE_DIR/raw/cd/$NEW_UUID2/summary.json
    
    - name: Commit report
      env:
        REPO_KEY: ${{secrets.GITHUB_TOKEN}}
        USERNAME: github-actions[bot]    
      run: |
        cd $EVIDENCE_DIR
        git add .
        git config --global user.name 'GH Actions workflow'
        git config --global user.email 'workflow@users.noreply.github.com'
        git commit -am "Publish evidence"
        git push https://$USERNAME:$REPO_KEY@github.com/gasgithub/trader-evidence   
    

      
      
