# This workflow will run CRA build a docker container, publish it to IBM Container Registry, and deploy it to IKS when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains a Dockerfile
# 2. Setup secrets in your repository by going to settings: Create ICR_NAMESPACE and IBM_CLOUD_API_KEY
# 3. Change the values for the IBM_CLOUD_REGION, REGISTRY_HOSTNAME, IMAGE_NAME, IKS_CLUSTER, DEPLOYMENT_NAME, and PORT

name: Run Code Risk Analyzer on PR

# https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows
on: pull_request
    # Edit to the branch(es) you want to build and deploy on each push.
    # branches: [ $default-branch ]
  
  # release:
  #  types: [created]

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
  IBM_CLOUD_REGION: us-south
  ICR_NAMESPACE: ${{ secrets.ICR_NAMESPACE }}
  REGISTRY_HOSTNAME: us.icr.io
  IMAGE_NAME: trader-gha-test
  IKS_CLUSTER: gas-cluster3
  DEPLOYMENT_NAME: trader
  CLUSTER_NAMESPACE: trader-gha-test
  EVIDENCE_DIR: evidence-repo
  

jobs:
  cra-discovery:
    name: CRA discovery
    runs-on: ubuntu-latest
    container: icr.io/continuous-delivery/cra-discovery:release.1571
    environment: production
    steps:
    - name: Update git
      run: |
        set -x +e
        uname -a
        git --version
        add-apt-repository ppa:git-core/ppa -y
        apt-get update
        apt-get install git -y
        git --version
        set -e
        
        
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Get timestamp
      uses: actions/github-script@v3.1.0
      id: author-date
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const commit_details = await github.git.getCommit({owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha});
          return commit_details.data.author.date
      
    - name: Check timestamp
      run: echo $COMMITTED_AT
      env:
        COMMITTED_AT: ${{ steps.author-date.outputs.result }}

    - name: Check docker
      run: |
        set -x
        docker version
        docker images
      
    - name: discovery
      continue-on-error: false    
      env:
        TOOLCHAIN_REGION: us-south   
        TOOLCHAIN_ID: 286e3b40-5099-4d87-9f12-57d2e425c64b
        REGION_ID: dal08
        DIRECTORY_NAME: .
        PIPELINE_DEBUG: 1
        COMMITTED_AT: ${{ steps.author-date.outputs.result }}
        
      run: |
        set -x
        pwd
        API_ENDPOINT="https://cloud.ibm.com"
        OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.cloud.ibm.com"    
        
        REPO_DIR_PATH="$GITHUB_WORKSPACE"
        ls -la
        ls -la $REPO_DIR_PATH
        
        echo "Fetching users's token"
        ibmcloud config --check-version false
        ibmcloud login -a $API_ENDPOINT -r $TOOLCHAIN_REGION --apikey $IBM_CLOUD_API_KEY
        export IBM_CLOUD_BEARER=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token' | awk '{ print $2 }')
 
        echo "Fetching service urls for user's data"
        HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
            -X GET "${OTC_BROKER_BASE_URL}/globalauth/toolchainids/${TOOLCHAIN_ID}" \
            --header "Authorization: Bearer ${IBM_CLOUD_BEARER}")
        HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        if [ "$HTTP_STATUS" -eq 401 -o "$HTTP_STATUS" -eq 403 ]; then
          echo ""
          echo "Error authenticating user for toolchain_id: ${TOOLCHAIN_ID}"
          echo "Please verify the Devops Insights card has been added to your toolchain and the api-key has access."
          exit 1
        fi
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo ""
          echo "Error! Please try again."
          exit 1
        fi
        HTTP_BODY=$(echo $HTTP_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')
        gitsecureUrl=$(echo ${HTTP_BODY} | jq -r '.service_urls.gitsecure')
        if [ -z "$gitsecureUrl" -o "$gitsecureUrl" = "null" ]; then
          echo ""
          echo "Error IBM Code Risk Analyzer is not supported in ${REGION_ID}"
          exit 1
        fi
          # create a dry-run k8s secret of type docker-registry to obtain 
          # the pull secrets for the base image used in the dockerfile
          # this is optional, but sometimes useful, for example when using
          # UBI images from RedHat
           
         # if [ -f "/properties/build-baseimage-auth-user" ] \
         #   && [ -f "/secrets/build-baseimage-auth-password" ] \
         #   && [ -f "/properties/build-baseimage-auth-host" ]; then
         #   echo "Adding pull secrets to access base image registry $(cat /properties/build-baseimage-auth-host)"
         #   kubectl create secret --dry-run=client --output=json \
         #     docker-registry registry-dockerconfig-secret \
         #     --docker-username="$(cat /properties/build-baseimage-auth-user)" \
         #     --docker-password="$(cat /secrets/build-baseimage-auth-password)" \
         #     --docker-server="$(cat /properties/build-baseimage-auth-host)" \
         #     --docker-email="$(cat /properties/build-baseimage-auth-email)" | \
         #     jq -r '.data[".dockerconfigjson"]' | base64 -d > config.json
         # fi
         
        echo "Repo URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY"
        echo "Branch: $GITHUB_REF"
        echo "Commit id: $GITHUB_SHA"
        
         
        /usr/local/bin/discovery \
          -giturl "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" \
          -gitbranch "$GITHUB_REF" \
          -repodir $REPO_DIR_PATH  \
          -rigapi "${gitsecureUrl}" \
          -commitid "$GITHUB_SHA" \
          -commitTimestamp "$COMMITTED_AT" \
          -toolchainid "${TOOLCHAIN_ID}"

  cra-vulnerability-scan-status-pending:
    name: cra-vulnerability-scan-status-pending
    needs: cra-discovery
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout
      uses: actions/checkout@v2  
      
    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      
    - name: Display the path
      env:
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      run: |
        import json
        import os
        import sys
        import urllib.request
        import urllib.parse
        
        state = "pending"
        print(os.environ['GITHUB_SHA'])
        revision = os.environ['GITHUB_SHA']
        description = "PR Pipeline Status"
        context = "cra-vulnerability-scan"
        
        # compute the target url of this pipeline run
        target_url = "https://github.com/gasgithub/trader/actions"
        
        # Create the request object according to the Git Flavor API
        api_prefix=""
        status_url = os.environ['GITHUB_SERVER_URL'] + api_prefix
          + "/repos/" + os.environ['GITHUB_REPOSITORY']
          + "/statuses/" + revision)        
        
        data = {
          "state": state,
          "target_url": target_url,
          "description": description,
          "context": context
        }   
        
        req = urllib.request.Request(
          status_url,
          data=json.dumps(data).encode('utf8'),
          headers={
            "content-type": "application/json",
            "Authorization": "Bearer " + os.environ['TOKEN']
          },
          method="POST"
        )
        req.add_header("User-Agent", "GH actions PR workflow")
 
        with urllib.request.urlopen(req) as resp:
          if not str(resp.status).startswith("2"):
            print("Error: %d" % (resp.status))
            print(resp.read())
            sys.exit(1)
          else:
            print(" commit status '" + state + "' has been set on " + os.environ['GITHUB_REPOSITORY'] + "#" + revision)
            print("Status: %d" % (resp.status))
            print(resp.read())
            sys.exit(0)

      shell: python      
 
 
 
