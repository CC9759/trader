# This workflow will:
# - build a maven Java application
# - create a docker container
# - publish it to Quay
# - commit updates to gitops repo
#
### Before you begin:
# - Have write access to a container image registry such as quay.io or Dockerhub.
# - Have access to your gitops repo.

# Name of the workflow
name: Build, Push, Gitops

on: 
  push:
    branches:
      - master 
    paths-ignore:
    - '.github/**'   
    

# Environment variables available to all jobs and steps in this workflow
env:
  # EDIT secrets with with your registry, registry path, and apikey
  REGISTRY: quay.io
  REGISTRY_NAMESPACE: gas_stocktrader
  # EDIT with your registry username.
  REGISTRY_USER: gas_stocktrader+quaytrader
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  IMAGE_NAME: trader
  
  GITHUB_SHA: ${{ github.sha }}
  
jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish
    runs-on: ubuntu-latest
    outputs:
      image-registry-path: ${{ steps.push-to-registry.outputs.image-registry-path }}
      unit-test-result: ${{ steps.unit-test.outputs.unit-test-result }}
    environment: production
    steps:

    # Checkout app repo
    - name: Checkout
      uses: actions/checkout@v2
      

    # Setup java
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 8      
  
    # Build and package app
    - name: Build and package app
      id: unit-test
      run: |
        mvn clean verify
        cat target/failsafe-reports/failsafe-summary.xml
        grep -q "<failures>0</failures>" target/failsafe-reports/failsafe-summary.xml
        code=$?
        echo "ret: $code"
        if [[ $code -eq 0  ]]; then
          echo "success"
          echo '::set-output name=unit-test-result::success'
        else
          echo "failed"
          echo '::set-output name=unit-test-result::failed'
        fi

    # Build the Docker image
    - name: Build with Docker
      run: |
        docker build -t "$REGISTRY"/"$REGISTRY_NAMESPACE"/"$IMAGE_NAME":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .

    # Push the image to Image Registry
    - name: Push the image to Registry
      id: push-to-registry
      run: |
        docker login -u="$REGISTRY_USER" -p="$REGISTRY_PASSWORD" "$REGISTRY"
        docker push $REGISTRY/$REGISTRY_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA
        echo '::set-output name=image-registry-path::$REGISTRY_HOSTNAME/$REGISTRY_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA' 
